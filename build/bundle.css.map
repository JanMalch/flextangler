{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Canvas.svelte",
    "FileInputs.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport FileInputs from './components/FileInputs.svelte';\nimport Canvas from './components/Canvas.svelte';\nconst size = 200;\nlet canvasSection;\nlet canvasComponent;\nlet previewVisible = false;\nlet loadedImages = [];\nlet imageElements = [];\nlet canvasReady = false;\nlet drawCuttingLines = false;\nlet drawFoldingLines = false;\nlet pointyBottom = true;\nfunction onFilesChange({ detail: fileList }) {\n    return __awaiter(this, void 0, void 0, function* () {\n        imageElements = []; // make canvas not ready while images are loading\n        loadedImages.forEach((img) => {\n            if ((img === null || img === void 0 ? void 0 : img.src) != null) {\n                URL.revokeObjectURL(img.src);\n            }\n        });\n        loadedImages = fileList.map((file) => {\n            var _a;\n            return ({\n                src: file == null ? null : URL.createObjectURL(file),\n                alt: (_a = file === null || file === void 0 ? void 0 : file.name) !== null && _a !== void 0 ? _a : null,\n            });\n        });\n        imageElements = yield Promise.all(loadedImages.map((img) => { var _a; return loadIntoImage((_a = img === null || img === void 0 ? void 0 : img.src) !== null && _a !== void 0 ? _a : null); }));\n    });\n}\nfunction loadIntoImage(source) {\n    return new Promise((resolve, reject) => {\n        if (source == null) {\n            return Promise.resolve(null);\n        }\n        const image = new Image();\n        image.addEventListener('load', () => resolve(image), { once: true });\n        image.addEventListener('error', (err) => reject(err), { once: true });\n        image.src = source;\n    });\n}\nfunction onFinish({ detail: { imagesAvailable, canvas }, }) {\n    canvasReady = imagesAvailable;\n}\nfunction togglePreview() {\n    previewVisible = !previewVisible;\n    if (previewVisible) {\n        setTimeout(() => canvasSection.scrollIntoView());\n    }\n}\nfunction downloadAsImage() {\n    const link = document.createElement('a');\n    link.download = 'flextangle-template.png';\n    link.href = canvasComponent.canvas.toDataURL('image/png');\n    link.target = '_blank';\n    link.click();\n}\n</script>\n\n<p>\n  The app will then transform your images to fit the flextangle template. Please\n  note that the cutting is based on the largest possible hexagon in the center\n  of each image. To make sure you have the desired outcome, you can upload\n  squared images that are at least\n  {size}&times;{size}px in size.\n</p>\n<p>\n  Simply select four images with the boxes below. If you select more than one\n  file, they are put into the subsequent boxes.\n</p>\n\n<section>\n  <FileInputs images=\"{loadedImages}\" on:filesChange=\"{onFilesChange}\" />\n</section>\n\n<section>\n  <label>\n    <input type=\"checkbox\" bind:checked=\"{pointyBottom}\" />\n    Y-Symmetric\n  </label>&nbsp;&nbsp;\n  <small>(looks better, but has a pointy bottom and thus cannot stand upright)</small>\n\n  <br />\n  <br />\n\n  <label>\n    <input type=\"checkbox\" bind:checked=\"{drawCuttingLines}\" />\n    Draw cutting lines\n  </label>\n  &nbsp;&nbsp;\n  <label>\n    <input type=\"checkbox\" bind:checked=\"{drawFoldingLines}\" />\n    Draw folding lines\n  </label>\n</section>\n\n<section>\n  <p>\n    {#if canvasReady}\n      <strong>Your template is ready!</strong>\n    {:else}Please select 4 images or download the blank template.{/if}<br />\n    Download the image or verify the outcome in the preview beforehand.\n  </p>\n</section>\n<section>\n  <button class=\"btn box-shadow\" on:click=\"{downloadAsImage}\">Download template</button>\n  <button\n    class=\"btn box-shadow\"\n    on:click=\"{togglePreview}\">{previewVisible ? 'Hide' : 'Show'}\n    preview</button>\n</section>\n<section hidden=\"{!previewVisible}\" bind:this=\"{canvasSection}\">\n  <Canvas\n    bind:this=\"{canvasComponent}\"\n    drawables=\"{imageElements}\"\n    drawCuttingLines=\"{drawCuttingLines}\"\n    drawFoldingLines=\"{drawFoldingLines}\"\n    pointyBottom=\"{pointyBottom}\"\n    size=\"{size}\"\n    on:finish=\"{onFinish}\" />\n</section>\n<section>\n  <p>\n    Print the template and follow the\n    <a href=\"https://i.imgur.com/9Fmn6Da.mp4\" rel=\"noopener\">cutting and folding\n      instructions</a>.<br />\n    Lastly make sure you share this website with your family and friends, if you\n    like it.\n  </p>\n</section>\n\n<style>\n  section {\n    margin: 64px 0;\n  }\n\n  .btn {\n    text-decoration: none;\n    text-transform: uppercase;\n    font-size: 18px;\n    border-radius: 4px;\n    padding: 16px 32px;\n    margin-right: 16px;\n    border: none;\n    outline: none;\n    font-weight: 500;\n    letter-spacing: 0.5px;\n    background-color: rgb(0, 100, 200);\n    color: #ffffff;\n    cursor: pointer;\n    transition: background-color 0.22s;\n  }\n\n  .btn:hover {\n    background-color: hsl(210, 100%, 30%);\n  }\n\n  .btn + .btn {\n    color: rgb(0, 100, 200);\n    background-color: #ffffff;\n  }\n\n  .btn + .btn:hover {\n    background-color: #f3f3f3;\n  }\n\n  .btn:disabled:hover,\n  .btn:disabled {\n    background-color: #cccccc;\n    color: #aaaaaa;\n    cursor: not-allowed;\n  }\n\n  @media (max-width: 599px) {\n    section {\n      margin: 32px 0;\n    }\n\n    .btn {\n      display: block;\n      width: 80%;\n      margin: 16px auto;\n    }\n  }\n</style>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\nimport { drawGlue } from '../drawing/glue';\nimport { foldingLines, setSupportingLineStyle } from '../drawing/lines';\nimport { extractRotatedTriangle, triangleSelectors, triangleSelectorsFlatSides, } from '../drawing/processing';\nimport { magicAngle } from '../formulas/content';\nimport { degreeToRadian } from '../formulas/math';\nimport { downwardTriangle, leftwardTriangle, rightwardTriangle, upwardTriangle, } from '../shapes';\n;\nexport let drawables = [];\nexport let size;\nexport let drawCuttingLines;\nexport let drawFoldingLines;\nexport let pointyBottom;\nexport let canvas = null;\nconst dispatch = createEventDispatcher();\n$: ctx = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n$: glueWidth = Math.ceil(size * 0.4);\n$: {\n    if (canvas != null && ctx != null) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        drawGlue(ctx, size, glueWidth);\n        const imagesAvailable = drawables.length === 4 &&\n            drawables.every((d) => d instanceof HTMLImageElement);\n        if (imagesAvailable) {\n            const usedSelectors = pointyBottom\n                ? triangleSelectorsFlatSides\n                : triangleSelectors;\n            const triangles = pointyBottom\n                ? [leftwardTriangle, rightwardTriangle]\n                : [downwardTriangle, upwardTriangle];\n            const allTriangleSetups = drawables.map((drawable) => Array(6)\n                .fill(0)\n                .map((_, i) => {\n                return Object.assign({ image: drawable, clippingTriangle: triangles[i % 2] }, usedSelectors[i]);\n            }));\n            for (let line = 0; line < allTriangleSetups.length; line++) {\n                const triangleSetups = allTriangleSetups[line];\n                for (let i = 0; i < 6; i++) {\n                    const setup = triangleSetups[i];\n                    const result = extractRotatedTriangle(size, setup.image, setup.clippingTriangle, setup.relativeRectangle, setup.rotation, pointyBottom);\n                    onProcessingFinish(result, line, i);\n                }\n            }\n        }\n        if (drawCuttingLines) {\n            doDrawCuttingLines();\n        }\n        if (drawFoldingLines) {\n            doDrawFoldingLines();\n        }\n        dispatch('finish', { canvas, imagesAvailable });\n    }\n}\nfunction doDrawCuttingLines() {\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    // bottom zic zac\n    ctx.lineTo(0, size * 2);\n    ctx.lineTo(size, size * 2.5);\n    ctx.lineTo(size * 2, size * 2);\n    ctx.lineTo(size * 3, size * 2.5);\n    ctx.lineTo(size * 4, size * 2);\n    ctx.lineTo(size * 5, size * 2.5);\n    ctx.lineTo(size * 6, size * 2);\n    // around glue\n    const yDiff = Math.tan(degreeToRadian(90 - magicAngle)) * glueWidth;\n    ctx.lineTo(size * 6 + glueWidth, size * 2 - yDiff);\n    ctx.lineTo(size * 6 + glueWidth, size + yDiff);\n    ctx.lineTo(size * 6, size);\n    ctx.lineTo(size * 6 + glueWidth, size - yDiff);\n    ctx.lineTo(size * 6 + glueWidth, yDiff);\n    ctx.lineTo(size * 6, 0);\n    ctx.closePath();\n    setSupportingLineStyle(ctx);\n    ctx.stroke();\n    ctx.restore();\n}\nconst drawLine = ({ start, end }) => {\n    ctx.beginPath();\n    ctx.moveTo(size * start.x, size * start.y);\n    ctx.lineTo(size * end.x, size * end.y);\n    ctx.stroke();\n};\nfunction doDrawFoldingLines() {\n    ctx.save();\n    setSupportingLineStyle(ctx);\n    foldingLines.vertical.forEach(drawLine);\n    foldingLines.diagonalTLBR.forEach(drawLine);\n    foldingLines.diagonalBLTR.forEach(drawLine);\n    ctx.restore();\n}\nfunction onProcessingFinish(partialCanvas, line, index) {\n    if (line % 2 === 0) {\n        if (index === 0) {\n            ctx.drawImage(partialCanvas, 5 * partialCanvas.width, line * (size / 2));\n        }\n        else {\n            ctx.drawImage(partialCanvas, (index - 1) * partialCanvas.width, line * (size / 2));\n        }\n    }\n    else {\n        ctx.drawImage(partialCanvas, index * partialCanvas.width, line * (size / 2));\n    }\n}\n</script>\n\n<svelte:options accessors />\n\n<canvas\n  class=\"box-shadow\"\n  width=\"{size * 6 + glueWidth}\"\n  height=\"{size * 2.5}\"\n  bind:this=\"{canvas}\"></canvas>\n\n<style>\n  canvas {\n    border: 1px solid #eeeeee;\n    border-radius: 4px;\n    background-color: #ffffff;\n    /* width does not affect the data in the canvas */\n    max-width: calc(min(95vw, 1400px) - 2px);\n  }\n\n  @media (min-width: 840px) {\n    canvas {\n      padding: 32px;\n      max-width: calc(min(95vw, 1400px) - 66px);\n    }\n  }\n</style>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\nexport let images = [];\nconst dispatch = createEventDispatcher();\nlet files = Array(4).fill(null);\nfunction onInputChange(event, index) {\n    const selectedFiles = Array.from(event.target.files);\n    files = Array(4)\n        .fill(null)\n        .map((_, i) => {\n        if (i < index || i >= index + selectedFiles.length) {\n            return files[i];\n        }\n        return selectedFiles[i - index];\n    });\n    dispatch('filesChange', files);\n}\n</script>\n\n<form>\n  {#each { length: 4 } as _, i}\n    <div class=\"box-shadow\">\n      {#if images[i]?.src != null}\n        <img src=\"{images[i].src ?? undefined}\" alt=\"{images[i].alt}}\" />\n      {/if}\n      <label for=\"file-{i}\">\n        {images[i]?.src == null ? `Select one ${i !== 3 ? 'or more' : ''} image${i === 3 ? '' : 's'}.` : 'Swap image.'}\n      </label>\n      <input\n        id=\"file-{i}\"\n        type=\"file\"\n        accept=\"image/*\"\n        multiple=\"{i !== 3}\"\n        on:change=\"{(ev) => onInputChange(ev, i)}\" />\n    </div>\n  {/each}\n</form>\n\n<style>\n  form {\n    display: flex;\n    align-items: center;\n    justify-content: space-evenly;\n    flex-wrap: wrap;\n  }\n\n  div {\n    border-radius: 4px;\n    background-color: #ffffff;\n    position: relative;\n    overflow: hidden;\n    height: 8em;\n    width: 8em;\n  }\n\n  label {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(255, 255, 255, 0.8);\n    transition: opacity 0.3s, background-color 0.3s;\n    padding: 16px;\n    font-size: 1.25em;\n    text-align: center;\n    display: grid;\n    place-items: center;\n    cursor: pointer;\n  }\n\n  label:hover {\n    background-color: rgba(240, 240, 240, 0.8);\n  }\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n\n  img + label {\n    opacity: 0;\n  }\n\n  img + label:hover {\n    background-color: rgba(255, 255, 255, 0.8);\n  }\n\n  div:hover > img + label {\n    opacity: 1;\n  }\n\n  input {\n    width: 0.1px;\n    height: 0.1px;\n    opacity: 0;\n    overflow: hidden;\n    position: absolute;\n    z-index: -1;\n    top: -9999px;\n    left: -9999px;\n  }\n\n  @media (max-width: 599px) {\n    div {\n      margin: 1em;\n    }\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}
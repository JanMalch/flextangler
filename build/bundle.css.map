{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Canvas.svelte",
    "FileInputs.svelte",
    "TriangleProcessing.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport FileInputs from './components/FileInputs.svelte';\nimport Canvas from './components/Canvas.svelte';\nlet canvasSection;\nlet canvasComponent;\nlet showLines = true;\nlet triangleHeight = 200;\nlet previewVisible = false;\nconst created = '2020-11-12T20:36:41.475Z'; // replaced by rollup\nconst version = '0.0.1'; // replaced by rollup\nlet loadedImages = [];\nlet imageElements = [];\nlet canvasReady = false;\nfunction onFilesChange({ detail: fileList }) {\n    return __awaiter(this, void 0, void 0, function* () {\n        imageElements = []; // make canvas not ready while images are loading\n        loadedImages.forEach((img) => URL.revokeObjectURL(img.src));\n        loadedImages = fileList.map((file) => ({\n            src: file == null ? null : URL.createObjectURL(file),\n            alt: file === null || file === void 0 ? void 0 : file.name,\n        }));\n        imageElements = yield Promise.all(loadedImages.map((img) => loadIntoImage(img.src)));\n    });\n}\nfunction loadIntoImage(source) {\n    return new Promise((resolve, reject) => {\n        if (source == null) {\n            return Promise.resolve(null);\n        }\n        const image = new Image();\n        image.addEventListener('load', () => resolve(image), { once: true });\n        image.addEventListener('error', (err) => reject(err), { once: true });\n        image.src = source;\n    });\n}\nfunction onFinish() {\n    canvasReady = true;\n}\nfunction togglePreview() {\n    previewVisible = !previewVisible;\n    if (previewVisible) {\n        setTimeout(() => canvasSection.scrollIntoView());\n    }\n}\nfunction downloadAsImage() {\n    const link = document.createElement('a');\n    link.download = 'flextangle-template.png';\n    link.href = canvasComponent.canvas.toDataURL('image/png');\n    link.target = '_blank';\n    link.click();\n}\n</script>\n\n<svelte:head>\n  <meta name=\"dc.created\" content=\"{created}\" />\n  <meta name=\"version\" content=\"{version}\" />\n</svelte:head>\n\n<div class=\"content\">\n  <header class=\"container\">\n    <h1>Flextangler <small>beta</small></h1>\n    <p>\n      <strong>Flextangler</strong>\n      is a web app that helps you create flextangles with your own images.\n      <strong>None of your files are sent to a server! All processing is done in\n        your browser.</strong>\n      In fact, you can use this website completely offline.\n    </p>\n    <p>\n      The app will then transform your images to fit the flextangle template.\n      Please note that the cutting is based on the largest possible hexagon in\n      the center of each image. To make sure you have the desired outcome, you\n      can upload squared images that are at least 250&times;250px in size.\n    </p>\n    <p>\n      Start by clicking on the boxes below to select four images. If you\n      select more that one, they are put into the subsequent boxes.\n    </p>\n  </header>\n\n  <main class=\"container\">\n    <section>\n      <FileInputs images=\"{loadedImages}\" on:filesChange=\"{onFilesChange}\" />\n    </section>\n\n<section>\n      <p>\n        {#if canvasReady}\n          <strong>Your template is ready!</strong>\n          {:else}\n          Please select 4 images before continuing.\n          {/if}<br/>\n        Download the image or verify the outcome in the preview beforehand.\n      </p>\n    </section>\n    <section id=\"actions\">\n      <button class=\"btn box-shadow\" disabled=\"{!canvasReady}\" on:click={downloadAsImage}>Download template</button>\n      <button class=\"btn box-shadow\" disabled=\"{!canvasReady}\" on:click={togglePreview}>{previewVisible ? 'Hide' : 'Show'} preview</button>\n    </section>\n    <section hidden=\"{!previewVisible}\" bind:this={canvasSection}>\n      <Canvas\n        bind:this={canvasComponent}\n        drawables=\"{imageElements}\"\n        triangleHeight=\"{triangleHeight}\"\n        showLines=\"{showLines}\"\n        on:finish={onFinish}/>\n    </section>\n    <section>\n      <p>Print the template and follow the\n      <a href=\"https://i.imgur.com/9Fmn6Da.mp4\" rel=\"noopener\">cutting and folding instructions</a>.<br/>\n        Lastly make sure you share this website with your family and friends, if you like it.</p>\n    </section>\n  </main>\n  <footer class=\"container\">\n    Created by\n    <a href=\"https://github.com/JanMalch\" rel=\"noopener\">JanMalch üë®üèª‚Äçüíª</a>\n    and Lorenz üß† &bullet;\n    <a href=\"https://github.com/JanMalch/flextangler\" rel=\"noopener\">Source Code</a>\n    &bullet;\n    <a\n      href=\"https://github.com/JanMalch/flextangler/blob/master/CHANGELOG.md\"\n      rel=\"noopener\">v{version}</a>\n    &bullet; &copy; JanMalch,\n    {new Date().getFullYear()}\n  </footer>\n</div>\n\n<style>\n  .content {\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-rows: auto 1fr auto;\n    height: 100%;\n  }\n\n  h1 {\n    display: flex;\n    align-items: baseline;\n    justify-content: center;\n  }\n\n  h1 > small {\n    font-size: 10px;\n    text-transform: uppercase;\n    opacity: 0.6;\n  }\n\n  header,\n  footer,\n  p {\n    text-align: center;\n  }\n\n  p {\n    width: 84ch;\n    margin-left: auto;\n    margin-right: auto;\n    font-size: 18px;\n    line-height: 1.65;\n  }\n\n  header > p:last-child {\n    margin-bottom: 0;\n  }\n\n  p > a {\n    font-weight: 500;\n  }\n\n  main > section {\n    margin: 64px 0;\n  }\n\n  details {\n      text-align: center; /* center canvas */\n  }\n\n  details > summary {\n      list-style-type: none;\n      outline: none;\n  }\n\n  details > summary strong {\n      cursor: pointer;\n  }\n\n  details > summary strong:hover {\n      text-decoration: underline;\n  }\n\n  details summary::-webkit-details-marker {\n      display:none;\n  }\n\n  #actions {\n      text-align: center;\n  }\n\n  .btn {\n      text-decoration: none;\n      text-transform: uppercase;\n      font-size: 18px;\n      border-radius: 4px;\n      padding: 16px 32px;\n      margin-right: 16px;\n      border: none;\n      outline: none;\n      font-weight: 500;\n      letter-spacing: 0.5px;\n      background-color: rgb(0,100,200);\n      color: #ffffff;\n      cursor: pointer;\n      transition: background-color 0.22s;\n  }\n\n  .btn:hover {\n      background-color: hsl(210, 100%, 30%);\n  }\n\n  .btn + .btn {\n      color: rgb(0,100,200);\n      background-color: #ffffff;\n  }\n\n  .btn + .btn:hover {\n      background-color: #f3f3f3;\n  }\n\n  .btn:disabled:hover,\n  .btn:disabled {\n      background-color: #cccccc;\n      color: #aaaaaa;\n      cursor: not-allowed;\n  }\n\n  footer {\n    padding: 32px 0;\n    opacity: 0.9;\n    font-size: 0.9em;\n  }\n</style>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\nimport { magicScale, magicWidth } from '../formulas/content';\nimport { degreeToRadian } from '../formulas/math';\nimport { leftwardTriangle, rightwardTriangle } from '../shapes';\nimport TriangleProcessing from './TriangleProcessing.svelte';\nexport let drawables = [];\nexport let triangleHeight;\nexport let showLines = true;\nexport let canvas = null;\nconst dispatch = createEventDispatcher();\n$: ctx = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n$: triangleBase = triangleHeight;\n$: inputValues = { triangleBase, triangleHeight };\n$: glueWidth = Math.ceil(triangleHeight * 0.4);\nconst lookup = [\n    {\n        relativeRectangle: {\n            x: 0.5 - magicWidth,\n            y: 0,\n            width: magicWidth,\n            height: 0.5,\n        },\n    },\n    {\n        relativeRectangle: {\n            x: 0.5,\n            y: 0,\n            width: magicWidth,\n            height: 0.5,\n        },\n    },\n    {\n        rotation: (canvas, prev) => {\n            const ctx = canvas.getContext('2d');\n            ctx.rotate(degreeToRadian(-90));\n            ctx.drawImage(prev, prev.width * -1, 0);\n        },\n        secondRotation: (canvas, prev) => {\n            const ctx = canvas.getContext('2d');\n            ctx.translate(0, canvas.height / 2);\n            ctx.rotate(degreeToRadian(-30));\n            ctx.drawImage(prev, 0, 0);\n        },\n        secondCanvasDimensions: (defaultWidth, defaultHeight) => ({\n            height: defaultWidth,\n            width: defaultHeight,\n        }),\n        relativeRectangle: {\n            x: 0.5,\n            y: 0.25,\n            width: magicWidth,\n            height: 0.5,\n        },\n    },\n    {\n        rotation: (canvas, prev) => {\n            const ctx = canvas.getContext('2d');\n            ctx.rotate(degreeToRadian(-30));\n            ctx.drawImage(prev, 0, 0);\n        },\n        secondRotation: (canvas, prev) => {\n            const ctx = canvas.getContext('2d');\n            ctx.rotate(degreeToRadian(-90));\n            ctx.drawImage(prev, -1 * inputValues.triangleBase, 0);\n        },\n        secondCanvasDimensions: (defaultWidth, defaultHeight) => ({\n            height: defaultWidth,\n            width: defaultHeight,\n        }),\n        relativeRectangle: {\n            x: 0.5,\n            y: 0.5,\n            width: magicWidth,\n            height: 0.5,\n        },\n    },\n    {\n        rotation: (canvas, prev) => {\n            const ctx = canvas.getContext('2d');\n            ctx.rotate(degreeToRadian(90));\n            ctx.drawImage(prev, 0, canvas.width * -1);\n        },\n        secondRotation: (canvas, prev) => {\n            const ctx = canvas.getContext('2d');\n            ctx.translate(canvas.width, canvas.height);\n            ctx.rotate(degreeToRadian(30));\n            ctx.drawImage(prev, -1 * canvas.height, -1 * canvas.width);\n        },\n        secondCanvasDimensions: (defaultWidth, defaultHeight) => ({\n            height: defaultWidth,\n            width: defaultHeight,\n        }),\n        relativeRectangle: {\n            x: 0.5 - magicWidth,\n            y: 0.5,\n            width: magicWidth,\n            height: 0.5,\n        },\n    },\n    {\n        rotation: (canvas, prev) => {\n            const ctx = canvas.getContext('2d');\n            ctx.translate(canvas.width, 0);\n            ctx.rotate(degreeToRadian(90));\n            ctx.drawImage(prev, 0, 0);\n        },\n        secondRotation: (canvas, prev) => {\n            const ctx = canvas.getContext('2d');\n            ctx.rotate(degreeToRadian(30));\n            ctx.drawImage(prev, 0, 0);\n        },\n        secondCanvasDimensions: (defaultWidth, defaultHeight) => {\n            return {\n                height: defaultWidth,\n                width: defaultHeight,\n            };\n        },\n        relativeRectangle: {\n            x: 0.5 - magicWidth,\n            y: 0.25,\n            width: magicWidth,\n            height: 0.5,\n        },\n    },\n];\n$: allTriangleSetups = drawables.some((d) => !(d instanceof HTMLImageElement))\n    ? []\n    : drawables.map((drawable) => Array(6)\n        .fill(0)\n        .map((_, i) => {\n        return Object.assign({ image: drawable, clippingTriangle: i % 2 === 1 ? rightwardTriangle : leftwardTriangle }, lookup[i]);\n    }));\nfunction onProcessingFinish({ detail: partialCanvas }, line, index) {\n    if (line % 2 === 0) {\n        if (index === 0) {\n            ctx.drawImage(partialCanvas, 5 * partialCanvas.width, line * (triangleBase / 2));\n        }\n        else {\n            ctx.drawImage(partialCanvas, (index - 1) * partialCanvas.width, line * (triangleBase / 2));\n        }\n    }\n    else {\n        ctx.drawImage(partialCanvas, index * partialCanvas.width, line * (triangleBase / 2));\n    }\n    dispatch('finish', canvas); // TODO: count how often and only emit last\n}\n</script>\n\n<svelte:options accessors/>\n\n<div aria-hidden=\"true\" hidden>\n  {#each allTriangleSetups as triangleSetups, line}\n    {#each triangleSetups as setup, i}\n      <strong>A{i}</strong>\n      <TriangleProcessing\n        {...setup}\n        showLines=\"{showLines}\"\n        inputValues=\"{inputValues}\"\n        scalingFactor=\"{magicScale}\"\n        on:finish=\"{(ev) => onProcessingFinish(ev, line, i)}\" />\n    {/each}\n  {/each}\n</div>\n\n<canvas\n  class=\"box-shadow\"\n  width=\"{triangleHeight * 6 + glueWidth}\"\n  height=\"{triangleBase * 2.5}\"\n  bind:this=\"{canvas}\"></canvas>\n\n<style>\n  canvas {\n    border: 1px solid #eeeeee;\n    border-radius: 4px;\n    padding: 32px;\n    background-color: #ffffff;\n  }\n</style>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\nexport let images = [];\nconst dispatch = createEventDispatcher();\nlet inputs = Array(4).fill(null);\nfunction onInputChange(_, index) {\n    const originalFiles = inputs[index].files;\n    const bound = Math.min(4, index + originalFiles.length);\n    for (let i = index; i < bound; i++) {\n        const list = new DataTransfer();\n        list.items.add(originalFiles.item(i - index));\n        inputs[i].files = list.files;\n    }\n    const files = inputs.map((input) => input.files.item(0));\n    dispatch('filesChange', files);\n}\n</script>\n\n<form>\n  {#each inputs as _, i}\n    <div class=\"box-shadow\" style=\"grid-area: {String.fromCharCode(i + 97)}\">\n      {#if images[i] != null}\n        <img src=\"{images[i].src}\" alt=\"{images[i].alt}}\" />\n      {/if}\n      <label on:click=\"{() => inputs[i]?.click()}\" for=\"file-{i}\">\n        {images[i] == null ? `Select one ${i !== 3 ? 'or more' : ''} image${i === 3 ? '' : 's'}.` : 'Swap image.'}\n      </label>\n      <input\n        bind:this=\"{inputs[i]}\"\n        id=\"file-{i}\"\n        type=\"file\"\n        accept=\"image/*\"\n        multiple=\"{i !== 3}\"\n        on:change=\"{(ev) => onInputChange(ev, i)}\" />\n    </div>\n  {/each}\n</form>\n\n<style>\n  form {\n    display: flex;\n    align-items: center;\n    justify-content: space-evenly;\n  }\n\n  div {\n    border-radius: 4px;\n    background-color: #ffffff;\n    position: relative;\n    overflow: hidden;\n    height: 8em;\n    width: 8em;\n  }\n\n  label {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(255, 255, 255, 0.8);\n    transition: opacity 0.3s, background-color 0.3s;\n    padding: 16px;\n    font-size: 1.25em;\n    text-align: center;\n    display: grid;\n    place-items: center;\n    cursor: pointer;\n  }\n\n  label:hover {\n    background-color: rgba(240, 240, 240, 0.8);\n  }\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n\n  img + label {\n    opacity: 0;\n  }\n\n  img + label:hover {\n    background-color: rgba(255, 255, 255, 0.8);\n  }\n\n  div:hover > img + label {\n    opacity: 1;\n  }\n\n  input {\n    width: 0.1px;\n    height: 0.1px;\n    opacity: 0;\n    overflow: hidden;\n    position: absolute;\n    z-index: -1;\n    top: -9999px;\n    left: -9999px;\n  }\n</style>\n",
    "<script lang=\"ts\">import { afterUpdate, createEventDispatcher } from 'svelte';\nimport { drawImage, inClip } from '../drawing/utils';\nimport { ORIGIN } from '../factories';\nimport { magicWidth } from '../formulas/content';\n;\nexport let image;\nexport let inputValues;\nexport let rotation;\nexport let secondRotation;\nexport let secondCanvasDimensions = (w, h) => ({ width: w, height: h });\nexport let scalingFactor;\nexport let clippingTriangle;\nexport let relativeRectangle;\nexport let showLines;\nlet toTriangleCanvas = null;\nlet rotatedTriangleCanvas = null;\nlet fullRotatedTriangleCanvas = null;\nlet scaledRotatedTriangleCanvas = null;\nconst dispatch = createEventDispatcher();\nafterUpdate(() => redraw());\nfunction loadIntoTriangleCanvas() {\n    const ctx = toTriangleCanvas.getContext('2d');\n    ctx.clearRect(0, 0, toTriangleCanvas.width, toTriangleCanvas.height);\n    ctx.save();\n    inClip(ctx, showLines, ORIGIN, clippingTriangle.map((point) => ({\n        x: point.x * toTriangleCanvas.width,\n        y: point.y * toTriangleCanvas.height,\n    })), () => {\n        drawImage(ctx, ORIGIN, image, {\n            x: 0,\n            y: 0,\n            width: toTriangleCanvas.width,\n            height: toTriangleCanvas.height,\n        }, {\n            x: relativeRectangle.x * image.naturalWidth,\n            y: relativeRectangle.y * image.naturalHeight,\n            width: relativeRectangle.width * image.naturalWidth,\n            height: relativeRectangle.height * image.naturalHeight,\n        });\n    });\n    ctx.restore();\n}\nfunction loadIntoRotatedCanvas() {\n    const ctx = rotatedTriangleCanvas.getContext('2d');\n    ctx.save();\n    if (rotation) {\n        rotation(rotatedTriangleCanvas, toTriangleCanvas);\n    }\n    else {\n        ctx.drawImage(toTriangleCanvas, 0, 0);\n    }\n    ctx.restore();\n}\nfunction loadIntoFullRotatedCanvas() {\n    const ctx = fullRotatedTriangleCanvas.getContext('2d');\n    ctx.save();\n    if (secondRotation) {\n        secondRotation(fullRotatedTriangleCanvas, rotatedTriangleCanvas);\n    }\n    else {\n        ctx.drawImage(rotatedTriangleCanvas, 0, 0);\n    }\n    ctx.restore();\n}\nfunction loadIntoScaledCanvas() {\n    const ctx = scaledRotatedTriangleCanvas.getContext('2d');\n    ctx.save();\n    drawImage(ctx, ORIGIN, fullRotatedTriangleCanvas, {\n        x: 0,\n        y: 0,\n        width: scaledRotatedTriangleCanvas.width,\n        height: scaledRotatedTriangleCanvas.height,\n    }, {\n        x: 0,\n        y: 0,\n        width: fullRotatedTriangleCanvas.width,\n        height: fullRotatedTriangleCanvas.height,\n    });\n    ctx.restore();\n}\nfunction redraw() {\n    loadIntoTriangleCanvas();\n    loadIntoRotatedCanvas();\n    loadIntoFullRotatedCanvas();\n    loadIntoScaledCanvas();\n    dispatch('finish', scaledRotatedTriangleCanvas);\n}\n</script>\n\n<section>\n  <div>\n    <b>toTriangleCanvas ({toTriangleCanvas?.width.toFixed(2)}\n      &times;\n      {toTriangleCanvas?.height.toFixed(2)})</b>\n    <canvas\n      bind:this=\"{toTriangleCanvas}\"\n      height=\"{inputValues.triangleHeight}\"\n      width=\"{inputValues.triangleBase * (magicWidth * 2)}\"></canvas>\n  </div>\n  <div>\n    <b>rotatedTriangleCanvas ({rotatedTriangleCanvas?.width.toFixed(2)}\n      &times;\n      {rotatedTriangleCanvas?.height.toFixed(2)})</b>\n    <canvas\n      bind:this=\"{rotatedTriangleCanvas}\"\n      height=\"{secondCanvasDimensions(inputValues.triangleBase * (magicWidth * 2), inputValues.triangleHeight).height}\"\n      width=\"{secondCanvasDimensions(inputValues.triangleBase * (magicWidth * 2), inputValues.triangleHeight).width}\"></canvas>\n  </div>\n  <div>\n    <b>fullRotatedTriangleCanvas ({fullRotatedTriangleCanvas?.width.toFixed(2)}\n      &times;\n      {fullRotatedTriangleCanvas?.height.toFixed(2)})</b>\n    <canvas\n      bind:this=\"{fullRotatedTriangleCanvas}\"\n      height=\"{inputValues.triangleHeight}\"\n      width=\"{inputValues.triangleBase * (magicWidth * 2)}\"></canvas>\n  </div>\n  <div>\n    <b>scaledRotatedTriangleCanvas ({scaledRotatedTriangleCanvas?.width.toFixed(2)}\n      &times;\n      {scaledRotatedTriangleCanvas?.height.toFixed(2)})</b>\n    <canvas\n      bind:this=\"{scaledRotatedTriangleCanvas}\"\n      height=\"{inputValues.triangleHeight}\"\n      width=\"{inputValues.triangleBase * (magicWidth * 2) * scalingFactor}\"></canvas>\n  </div>\n</section>\n\n<style>\n  section {\n    display: grid;\n    grid-gap: 16px;\n    grid-template-columns: repeat(4, 1fr);\n    margin-bottom: 32px;\n  }\n\n  b {\n    display: block;\n  }\n\n  canvas {\n    border: 1px solid #444;\n    background-color: #eeeeee;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAwIE,QAAQ,4BAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,IAAI,CAC3B,kBAAkB,CAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CACjC,MAAM,CAAE,IAAI,AACd,CAAC,AAED,EAAE,4BAAC,CAAC,AACF,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,QAAQ,CACrB,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,gBAAE,CAAG,KAAK,cAAC,CAAC,AACV,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,SAAS,CACzB,OAAO,CAAE,GAAG,AACd,CAAC,AAED,kCAAM,CACN,kCAAM,CACN,CAAC,4BAAC,CAAC,AACD,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,CAAC,4BAAC,CAAC,AACD,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,oBAAM,CAAG,eAAC,WAAW,AAAC,CAAC,AACrB,aAAa,CAAE,CAAC,AAClB,CAAC,AAED,eAAC,CAAG,CAAC,cAAC,CAAC,AACL,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,kBAAI,CAAG,OAAO,cAAC,CAAC,AACd,MAAM,CAAE,IAAI,CAAC,CAAC,AAChB,CAAC,AAuBD,QAAQ,4BAAC,CAAC,AACN,UAAU,CAAE,MAAM,AACtB,CAAC,AAED,IAAI,4BAAC,CAAC,AACF,eAAe,CAAE,IAAI,CACrB,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,YAAY,CAAE,IAAI,CAClB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,KAAK,CACrB,gBAAgB,CAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAChC,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,gBAAgB,CAAC,KAAK,AACtC,CAAC,AAED,gCAAI,MAAM,AAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AAED,kBAAI,CAAG,IAAI,cAAC,CAAC,AACT,KAAK,CAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CACrB,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AAED,kBAAI,CAAG,kBAAI,MAAM,AAAC,CAAC,AACf,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AAED,gCAAI,SAAS,MAAM,CACnB,gCAAI,SAAS,AAAC,CAAC,AACX,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,WAAW,AACvB,CAAC,AAED,MAAM,4BAAC,CAAC,AACN,OAAO,CAAE,IAAI,CAAC,CAAC,CACf,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,AAClB,CAAC;AC5ED,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,OAAO,AAC3B,CAAC;AC1ID,IAAI,6CAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,YAAY,AAC/B,CAAC,AAED,GAAG,6CAAC,CAAC,AACH,aAAa,CAAE,GAAG,CAClB,gBAAgB,CAAE,OAAO,CACzB,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,KAAK,6CAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC1C,UAAU,CAAE,OAAO,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAC/C,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,MAAM,CACjB,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,kDAAK,MAAM,AAAC,CAAC,AACX,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC,AAED,GAAG,6CAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,AACnB,CAAC,AAED,kBAAG,CAAG,KAAK,8BAAC,CAAC,AACX,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,kBAAG,CAAG,mCAAK,MAAM,AAAC,CAAC,AACjB,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC,AAED,kBAAG,MAAM,CAAG,kBAAG,CAAG,KAAK,eAAC,CAAC,AACvB,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,KAAK,6CAAC,CAAC,AACL,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,CAAC,CACV,QAAQ,CAAE,MAAM,CAChB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,CACX,GAAG,CAAE,OAAO,CACZ,IAAI,CAAE,OAAO,AACf,CAAC;AC6BD,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,IAAI,CACd,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,CAAC,eAAC,CAAC,AACD,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,gBAAgB,CAAE,OAAO,AAC3B,CAAC"
}